name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  KUBECONFIG_FILE: ${{ secrets.KUBECONFIG }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

jobs:
  say-hello:
    name: Say Hello
    runs-on: ubuntu-latest
    steps:
      - name: Hello World Action
        run: echo "Hello, DevSecOps!"

  build-artifact:
    name: Build Artifact - Maven
    runs-on: ubuntu-latest
    needs: say-hello
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for SonarQube
    
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
    
    - name: Build Artifact
      run: mvn clean package -DskipTests=true
    
    - name: Archive JAR
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifact
        path: target/*.jar

  unit-tests:
    name: Unit Tests - JUnit and Jacoco
    runs-on: ubuntu-latest
    needs: build-artifact
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for SonarQube
    
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
    
    - name: Run Tests
      run: mvn test
    
    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: JUnit Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit
    
    - name: Generate JaCoCo Report
      run: mvn jacoco:report
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: target/site/jacoco/jacoco.xml
        fail_ci_if_error: false
    
    - name: Archive test results and coverage
      uses: actions/upload-artifact@v4
      with:
        name: test-coverage-reports
        path: |
          target/surefire-reports/
          target/site/jacoco/

  # sonarqube-analysis:
  #   name: SonarQube Analysis
  #   runs-on: ubuntu-latest
  #   needs: unit-tests
    
  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 0
    
  #   - name: Set up JDK 8
  #     uses: actions/setup-java@v4
  #     with:
  #       java-version: '8'
  #       distribution: 'temurin'
    
  #   - name: Download test coverage reports
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: test-coverage-reports
  #       path: target/
    
  #   - name: Run SonarQube Analysis
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
  #     run: |
  #       mvn sonar:sonar \
  #         -Dsonar.projectKey=devsecops_numeric \
  #         -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
  #         -Dsonar.token=${{ env.SONAR_TOKEN }} \
  #         -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  mutation-tests:
    name: Mutation Tests - PITest
    runs-on: ubuntu-latest
    needs: sonarqube-analysis
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
    
    # - name: Run Mutation Tests (PITest)
    #   run: mvn org.pitest:pitest-maven:mutationCoverage
    
    # - name: Upload PITest Reports
    #   uses: actions/upload-artifact@v4
    #   if: always()
    #   with:
    #     name: pitest-reports
    #     path: target/pit-reports/

  docker-build-push:
    name: Docker image build and push
    runs-on: ubuntu-latest
    needs: [sonarqube-analysis, mutation-tests]
    if: always() && (needs.sonarqube-analysis.result == 'success')
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
    
    - name: Build JAR for Docker
      run: mvn clean package -DskipTests=true
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
  # To be included in future iterations
  # kubernetes-deployment-dev:
  #   name: Kubernetes Deployment - DEV
  #   runs-on: ubuntu-latest
  #   needs: docker-build-push
  #   if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    
  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: Setup kubectl
  #     uses: azure/setup-kubectl@v3
  #     with:
  #       version: 'v1.24.0'
    
  #   - name: Configure kubectl
  #     run: |
  #       mkdir -p $HOME/.kube
  #       echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config
  #       chmod 600 $HOME/.kube/config
    
  #   - name: Update Kubernetes manifest
  #     run: |
  #       sed -i 's#REPLACE_ME#ghcr.io/${{ github.repository }}:latest#g' k8s_deployment_service.yaml
    
  #   - name: Deploy to Kubernetes
  #     run: |
  #       kubectl apply -f k8s_deployment_service.yaml
    
  #   - name: Verify deployment
  #     run: |
  #       kubectl rollout status deployment/java-app -n default --timeout=300s