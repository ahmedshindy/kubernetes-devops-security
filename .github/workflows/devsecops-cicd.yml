name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  KUBECONFIG_FILE: ${{ secrets.KUBECONFIG }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

jobs:
  say-hello:
    name: Say Hello
    runs-on: ubuntu-latest
    steps:
      - name: Hello World Action
        run: echo "Hello, DevSecOps!"

  build-artifact:
    name: Build Artifact - Maven
    runs-on: ubuntu-latest
    needs: say-hello
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for SonarQube
    
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
    
    - name: Build Artifact
      run: mvn clean package -DskipTests=true
    
    - name: Archive JAR
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifact
        path: target/*.jar

  unit-tests:
    name: Unit Tests - JUnit and Jacoco
    runs-on: ubuntu-latest
    needs: build-artifact
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for SonarQube
    
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
    
    - name: Run Tests
      run: mvn test
    
    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: JUnit Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit
    
    - name: Generate JaCoCo Report
      run: mvn jacoco:report
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: target/site/jacoco/jacoco.xml
        fail_ci_if_error: false
    
    - name: Archive test results and coverage
      uses: actions/upload-artifact@v4
      with:
        name: test-coverage-reports
        path: |
          target/surefire-reports/
          target/site/jacoco/

  # sonarqube-analysis:
  #   name: SonarQube Analysis
  #   runs-on: ubuntu-latest
  #   needs: unit-tests
    
  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 0
    
  #   - name: Set up JDK 8
  #     uses: actions/setup-java@v4
  #     with:
  #       java-version: '8'
  #       distribution: 'temurin'
    
  #   - name: Download test coverage reports
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: test-coverage-reports
  #       path: target/
    
  #   - name: Run SonarQube Analysis
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
  #     run: |
  #       mvn sonar:sonar \
  #         -Dsonar.projectKey=devsecops_numeric \
  #         -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
  #         -Dsonar.token=${{ env.SONAR_TOKEN }} \
  #         -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  opa-conftest:
    name: OPA Conftest - Dockerfile Security
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Conftest
      run: |
        wget https://github.com/open-policy-agent/conftest/releases/download/v0.46.0/conftest_0.46.0_Linux_x86_64.tar.gz
        tar xzf conftest_0.46.0_Linux_x86_64.tar.gz
        sudo mv conftest /usr/local/bin
        chmod +x /usr/local/bin/conftest
    
    - name: Create OPA Docker security policy
      run: |
        mkdir -p opa-policies
        cat > opa-policies/opa-docker-security.rego << 'EOF'
        package docker.security
        
        import rego.v1
        
        # Deny running as root
        deny contains msg if {
            input[_].Cmd == "user"
            val := input[_].Value
            val[0] == "root"
            msg := "Container should not run as root user"
        }
        
        # Require specific base images (customize as needed)
        deny contains msg if {
            input[_].Cmd == "from"
            val := input[_].Value
            not startswith(val[0], "openjdk:")
            not startswith(val[0], "eclipse-temurin:")
            not startswith(val[0], "amazoncorretto:")
            msg := "Base image should use trusted JDK images"
        }
        
        # Check for COPY/ADD with broad permissions
        warn contains msg if {
            input[_].Cmd == "copy"
            msg := "Review COPY commands for security implications"
        }
        
        # Ensure EXPOSE is used appropriately
        warn contains msg if {
            input[_].Cmd == "expose"
            val := input[_].Value
            to_number(val[0]) < 1024
            msg := sprintf("Exposing privileged port %s", [val[0]])
        }
        EOF
    
    - name: Run OPA Conftest
      run: |
        if [ -f "Dockerfile" ]; then
          /usr/local/bin/conftest test --policy opa-policies/opa-docker-security.rego Dockerfile
        else
          echo "No Dockerfile found, skipping Conftest scan"
          exit 1
        fi
    
    - name: Upload OPA policy and results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: opa-conftest-results
        path: opa-policies/
        retention-days: 30

  mutation-tests:
    name: Mutation Tests - PITest
    runs-on: ubuntu-latest
    # needs: sonarqube-analysis
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
    
    # - name: Run Mutation Tests (PITest)
    #   run: mvn org.pitest:pitest-maven:mutationCoverage
    
    # - name: Upload PITest Reports
    #   uses: actions/upload-artifact@v4
    #   if: always()
    #   with:
    #     name: pitest-reports
    #     path: target/pit-reports/

  docker-build-push:
    name: Docker image build and push
    runs-on: ubuntu-latest
    needs: [opa-conftest, mutation-tests]
    if: always() && (needs.opa-conftest.result == 'success')
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
    
    - name: Build JAR for Docker
      run: mvn clean package -DskipTests=true
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  trivy-security-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: always() && needs.docker-build-push.result == 'success'
    permissions:
      contents: read
      security-events: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract image tag for scanning
      id: image-tag
      run: |
        # Extract the first tag from the multiline tags output
        IMAGE_TAG=$(echo "${{ needs.docker-build-push.outputs.image-tags }}" | head -n1)
        echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "Scanning image: ${IMAGE_TAG}"
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.image-tag.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'  # Don't fail the build on vulnerabilities (configurable)
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Trivy vulnerability scanner (Table format)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.image-tag.outputs.image-tag }}
        format: 'table'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'
    
    - name: Generate Trivy JSON report
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.image-tag.outputs.image-tag }}
        format: 'json'
        output: 'trivy-results.json'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'
    
    - name: Upload Trivy scan results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-security-scan-results
        path: |
          trivy-results.sarif
          trivy-results.json
        retention-days: 30
    
    - name: Check for critical vulnerabilities
      run: |
        # Parse JSON results to check for critical vulnerabilities
        CRITICAL_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-results.json || echo "0")
        HIGH_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-results.json || echo "0")
        
        echo "Critical vulnerabilities found: $CRITICAL_COUNT"
        echo "High vulnerabilities found: $HIGH_COUNT"
        
        # Optionally fail the build if critical vulnerabilities are found
        # Uncomment the following lines to enable this behavior:
        # if [ "$CRITICAL_COUNT" -gt 0 ]; then
        #   echo "❌ Critical vulnerabilities found! Failing the build."
        #   exit 1
        # fi
        
        # Create a summary
        echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Critical**: $CRITICAL_COUNT vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "- **High**: $HIGH_COUNT vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ steps.image-tag.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY

  # To be included in future iterations
  # kubernetes-deployment-dev:
  #   name: Kubernetes Deployment - DEV
  #   runs-on: ubuntu-latest
  #   needs: [docker-build-push, trivy-security-scan]
  #   if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && needs.trivy-security-scan.result == 'success'
    
  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: Setup kubectl
  #     uses: azure/setup-kubectl@v3
  #     with:
  #       version: 'v1.24.0'
    
  #   - name: Configure kubectl
  #     run: |
  #       mkdir -p $HOME/.kube
  #       echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config
  #       chmod 600 $HOME/.kube/config
    
  #   - name: Update Kubernetes manifest
  #     run: |
  #       sed -i 's#REPLACE_ME#ghcr.io/${{ github.repository }}:latest#g' k8s_deployment_service.yaml
    
  #   - name: Deploy to Kubernetes
  #     run: |
  #       kubectl apply -f k8s_deployment_service.yaml
    
  #   - name: Verify deployment
  #     run: |
  #       kubectl rollout status deployment/java-app -n default --timeout=300s